#!/usr/bin/node
// vi:syntax=javascript

/*
 *
 * HARDBOP. Session launcher.
 *
 * Runs the initial compilation of hardbop, bootstrapping
 * into ClojureScript code like nothing to do on this planet.
 *
 */

(function () {

  // Engage launch sequence 
  var fs   = require('fs'),
      path = require('path'),
      goog = require('./libs/goog.js');

  // TRI!   Load ClojureScript compiler
  require('./libs/namespaces.js');
  goog.require('nodecljs');

  // DVA!   Set print function
  var out = function (arg) { process.stdout.write(arg) };
  cljs.core._STAR_out_STAR_ = cljs.core._STAR_rtn_STAR_ =
  cljs.core._STAR_err_STAR_ = cljs.core._STAR_print_fn_STAR_ = out;

  // ODIN!  Compile Hardbop REPL
  var src = fs.readFileSync('./hardbop/repl.cljs').toString(),
      bop = cljs.repl.evaluate_code(src);

  // Okay now this part I'm admittedly still scared of. Mommy?
  // Apparently you need to pass null as a first argument to
  // everything, though I still haven't found out why exactly.
  // I guess the below code corresponds to:
  //   (apply (*main-cli-fn* (drop 3 (.argv js/process))))
  // Note that `*main-cli-fn*` has been set to a new value by
  // evaluating `hardbop.cljs`, which contains this code:
  //   (set! *main-cli-fn* -main)
  // which sets a new main function: `-main` from `hardbop.cljs`.
  // Thus, by running `*main-cli-fn*` we effectively hand over
  // control to Hardbop. PUSK! 
  cljs.core.apply.call(null, cljs.core._STAR_main_cli_fn_STAR_,
                       cljs.core.drop.call(null, 3, process.argv));

})()
